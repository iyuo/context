{"version":3,"file":"context.es.js","sources":["../src/context.ts"],"sourcesContent":["/**\r\n * The interface of a plugin function, where\r\n * - `this` is context that has `TContext` type.\r\n * - `use` are arguments of use array\r\n *\r\n * ```\r\n * (this: TContext, ...use: any[]) => TResult\r\n * (this: TContext) => TResult\r\n * (...use: any[]) => TResult\r\n * ```\r\n *\r\n * A sample plugin of array numbers sum:\r\n * ```\r\n * function sum(this: number[]): number {\r\n *   return this.reduce((previousValue: number, currentValue: number): number => {\r\n *     return previousValue + currentValue;\r\n *   }, 0);\r\n * }\r\n *\r\n * var numbers = new Context([1, 2, 3, 4, 5]);\r\n * var takeSum = numbers.make(sum);\r\n * console.log(takeSum); // 15\r\n * ```\r\n *  */\r\nexport interface IPlugin<TContext, TResult> {\r\n  (this: TContext, ...use: any[]): TResult;\r\n}\r\n\r\n/**\r\n * The interface of a plugin function, where\r\n * - `this` is Context<TContext> system\r\n * - `context` is the first variable\r\n * - `use` is the second variable\r\n *\r\n * ```\r\n * (this: Context<TContext>, context: TContext, use: any[]) => TResult;\r\n * (this: Context<TContext>, context: TContext) => TResult;\r\n * (this: Context<TContext>) => TResult;\r\n * (context: TContext, use: any[]) => TResult;\r\n * (context: TContext) => TResult;\r\n * ```\r\n *\r\n * A sample plugin of clearing \"use\" array\r\n * ```\r\n * function clearUse<TContext>(this: Context<TContext>, context: any, use: any[]): Context<TContext> {\r\n *   use.splice(0, use.length);\r\n *   return this;\r\n * }\r\n *\r\n * var attention = new Context({\r\n *   hello: 'world'\r\n * });\r\n *\r\n * attention\r\n *   .use(1,2,3)\r\n *   .scope(clearUse);\r\n * ```\r\n */\r\nexport interface IScope<TContext, TResult> {\r\n  (this: Context<TContext>, context: TContext, use: any[]): TResult;\r\n}\r\n\r\n/**\r\n * Converts a function to a context ecosystem plugin.\r\n * Sample\r\n * ```\r\n * let namespacePlugin = pluginize(namespace);\r\n * let obj = {};\r\n * let ns = new Context(obj).map(namespacePlugin(\"my.own.ns\"));\r\n * console.log(obj);\r\n * ```\r\n * @param plugin Processing plugin\r\n */\r\nexport function pluginize<TContext, TResult>(\r\n  plugin: IPlugin<TContext, TResult>\r\n) {\r\n  return function(...args: any[]): IPlugin<TContext, TResult> {\r\n    return function() {\r\n      return plugin.apply(this, args);\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * The TypeScript ecosystem for an object. It allows to add processing plugins to it.\r\n */\r\nexport class Context<TContext> {\r\n  private _context: TContext;\r\n  private _use: any[];\r\n\r\n  /**\r\n   * The context ecosystem. The wrapper of a context object.\r\n   * @param context The context of an ecosystem\r\n   *\r\n   * Sample:\r\n   * ```ts\r\n   * var attention = new Context('This is a message');\r\n   * console.log(attention.context()); // 'This is a message'\r\n   * ```\r\n   */\r\n  public constructor(context: TContext) {\r\n    this._use = [];\r\n    this._context = context;\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    if (!(this instanceof Context)) {\r\n      throw new Error(\r\n        'Invalid using of context class. Probably missing \"new\" keyword.'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the context from a wrapper.\r\n   *\r\n   * Sample:\r\n   * ```ts\r\n   * var arr = new Context([1, 2, 3]);\r\n   * console.log( arr.context() ); // [1, 2, 3]\r\n   * ```\r\n   * @returns context\r\n   */\r\n  public context(): TContext {\r\n    return this._context;\r\n  }\r\n\r\n  /**\r\n   * Change current context to a new one\r\n   *\r\n   * Sample:\r\n   * ```\r\n   * var arr = new Context([1, 2, 3]);\r\n   * var changed = arr.change([4,5,6]);\r\n   * console.log( arr === changed ); // true\r\n   * console.log( arr.context() ); // [4,5,6]\r\n   * ```\r\n   * @param context new Context\r\n   * @returns The context ecosystem\r\n   */\r\n  public change(context: TContext): Context<TContext> {\r\n    this._context = context;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add arguments of plugins execution\r\n   *\r\n   * Sample:\r\n   * ```\r\n   * function dialog(this: any, useQ: string, useA: string) {\r\n   *   this.q(`${useQ} Hi, how are you doing?`);\r\n   *   this.a(`${useA} Fine.`);\r\n   *   this.q(`${useA} How's it going?`);\r\n   *   this.a(`${useQ} Good`);\r\n   * }\r\n   *\r\n   * var space = new Context({\r\n   *   q: (msg: string) => { console.log(`Q: ${msg}`) },\r\n   *   a: (msg: string) => { console.log(`A: ${msg}`) }\r\n   * });\r\n   *\r\n   * space.use('Tom', 'Lisa').make(dialog);\r\n   * ```\r\n   *\r\n   * @param args arguments to add\r\n   * @returns The context ecosystem\r\n   */\r\n  public use(...args: any[]): Context<TContext> {\r\n    this._use.push(...args);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this arguments of plugins execution\r\n   * @param use the arguments to use\r\n   * @returns The context ecosystem\r\n   */\r\n  public useArray(use: any[]): Context<TContext> {\r\n    this._use = use;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Execute plugins functions â€” a tasks for a context\r\n   * @param plugins Processing plugins\r\n   * ```\r\n   * (this: TContext, ...use: any[]) => void\r\n   * ```\r\n   * @returns The context ecosystem\r\n   */\r\n  public tasks(...plugins: IPlugin<TContext, void>[]): Context<TContext> {\r\n    for (let i = 0; i < plugins.length; i++) {\r\n      let plugin = plugins[i];\r\n      plugin.apply(this._context, this._use);\r\n    }\r\n    this._use = [];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Execute plugin with params\r\n   * @param plugin Processing plugin\r\n   * ```\r\n   * (this: TContext, ...use: any[]) => void\r\n   * ```\r\n   * @param use Arguments of a plugin\r\n   * @returns The context ecosystem\r\n   */\r\n  public task(\r\n    plugin: IPlugin<TContext, void>,\r\n    ...use: any[]\r\n  ): Context<TContext> {\r\n    let args = use.length === 0 ? this._use : use;\r\n    plugin.apply(this._context, args);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Execute plugin function and return the result of plugin processing\r\n   * @param plugin Processing plugin\r\n   * ```\r\n   * (this: TContext, ...use: any[]) => TResult\r\n   * ```\r\n   * @returns The result of plugin processing\r\n   */\r\n  public make<TResult>(\r\n    plugin: IPlugin<TContext, TResult>,\r\n    ...use: any[]\r\n  ): TResult {\r\n    let args = use.length === 0 ? this._use : use;\r\n    let result = plugin.apply(this._context, args);\r\n    this._use = [];\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Execute plugin and make new context, based on the plugin result\r\n   * @param plugin Processing plugin\r\n   * ```\r\n   * (this: TContext, ...use: any[]) => TResult\r\n   * ```\r\n   * @param use arguments of a plugin\r\n   * @returns New context, based on plugin result.\r\n   */\r\n  public map<TMappedContext>(\r\n    plugin: IPlugin<TContext, TMappedContext>,\r\n    ...use: any[]\r\n  ): Context<TMappedContext> {\r\n    let args = use.length === 0 ? this._use : use;\r\n    let result = new Context(plugin.apply(this._context, args));\r\n    this._use = [];\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Execute IScope processing plugin\r\n   * @param plugin Processing plugin\r\n   * ```\r\n   * (this: Context<TContext>, context: TContext, use: any[]): TResult;\r\n   * ```\r\n   * @returns The result of the processing\r\n   */\r\n  public scope<TResult>(\r\n    plugin: IScope<TContext, TResult>,\r\n    ...use: any[]\r\n  ): TResult {\r\n    let args = use.length === 0 ? this._use : use;\r\n    let result = plugin.call(this, this._context, this._use);\r\n    this._use = [];\r\n    return result;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}